@startuml

title Chess - Class Diagram - Domain model

package utils {
    class WithConsoleModel
}

package Chess {
class Game

Game -up-|> WithConsoleModel
Board <-up- Piece

class Board
class Player
class Move
class Spot{
-int x,y
+ setPiece()
+ getPiece()
}

King -up-|> Piece
Queen -up-|> Piece
Rook -up-|> Piece
Bishop -up-|> Piece
Knight -up-|> Piece
Pawn -up-|> Piece


abstract class Piece{
-boolean killed 
-boolean white
+ setWhite(boolean)
+ boolean isWhite()
+ boolean isKilled()
+ boolean kill()
+ boolean canMove(board, start, end)
+ boolean {abstract} specificPieceCanMove(board, start, end)
}
class King{
 + boolean specificPieceCanMove(board, start, end)
}
class Queen{
 + boolean specificPieceCanMove(board, start, end)
}
class Rook{
 + boolean specificPieceCanMove(board, start, end)
}
class Bishop{
 + boolean specificPieceCanMove(board, start, end)
}
class Knight{
 + boolean specificPieceCanMove(board, start, end)
}

class Pawn{
 + boolean specificPieceCanMove(board, start, end)
}

class Board{
- Spot[][] boxes
+ Spot getBox(x,y)
+ void resetBoard()
+ boolean anyPieceInBetween(start, end)

}

Board "1"*-down-"8x8" Spot
Spot "1"*-down-"0..1" Piece


class Player{
-boolean whiteSide
+boolean isWhiteSide()
}

class Move{
-Player player
-Spot start
-Spot end
-Piece pieceMoved
-Piece pieceKilled
+Move(Player player, Spot start,Spot end)
}

Move "1"*-down-"1"  Player
Move "1"*-down-"2" Spot
Move "1"*-down-"2" Piece

enum GameStatus {
    BLACK_WIN, 
    WHITE_WIN, 
    STALEMATE, 
    ACTIVE
}

class Game{
-Player[] players
-Board board
-Player turn
-GameStatus status
-List<Move> pastMoves
+void init(player1,player2)
+boolean isFinished()
+GameStatus getStatus()
+void setStatus(gameStatus
+boolean playerMove(player,startX,startY,endX,endY)
}

enum Message{
    TITLE,
	BLACK_WINS,
	WHITE_WINS,
	STALEMATE,
	CHOOSE_YOUR_MOVE,
	WHITE,
	BLACK,
	ILLEGAL_MOVE;
	}

Game --> Message
Game "1"*-down-"2"  Player
Game "1"*-down-"1"  Board
Game "1"*-down-"1"  GameStatus
Game o--"n"  Move
}

@enduml
